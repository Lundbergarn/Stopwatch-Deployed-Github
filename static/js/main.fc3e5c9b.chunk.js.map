{"version":3,"sources":["components/Button.js","components/Watch.js","App.js","serviceWorker.js","index.js"],"names":["Button","title","click","className","onClick","Clock","useState","splitValues","setSplitValues","isActive","setIsActive","time","setTime","laps","setLaps","lap","setLap","interval","formatTime","ms","min","Math","floor","sec","toFixed","useEffect","startTime","Date","now","setInterval","currentTime","clearInterval","lapTime","lapTimes","unshift","splitTime","splitVal","map","value","index","key","length","App","Watch","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6LAaeA,EAXA,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MACvB,OACE,4BACEC,UAAU,+BACVC,QAAS,kBAAMF,MAEdD,ICoHQI,EAzHD,WAAO,IAAD,EACoBC,mBAAS,IAD7B,mBACXC,EADW,KACEC,EADF,OAEcF,oBAAS,GAFvB,mBAEXG,EAFW,KAEDC,EAFC,OAGMJ,mBAAS,QAHf,mBAGXK,EAHW,KAGLC,EAHK,OAIMN,mBAAS,IAJf,mBAIXO,EAJW,KAILC,EAJK,OAKIR,mBAAS,GALb,mBAKXS,EALW,KAKNC,EALM,KAMdC,EAAW,KAgCf,SAASC,EAAWC,GAClB,IAAIC,EAAMC,KAAKC,MAAOH,EAAE,IAAkB,IACtCI,GAAQJ,EAAK,IAAS,KAAMK,QAAQ,GACxC,MAAM,GAAN,OAAUJ,EAAM,GAAK,IAAMA,EAAMA,EAAjC,YAAwCG,EAAM,GAAK,IAAMA,EAAMA,GAqBjE,OAjBAE,qBAAU,WAER,GAAIhB,EAAU,CACZ,IAAMiB,EAAYC,KAAKC,MAAQjB,EAE/BM,EAAWY,aAAY,WACrB,IAAIC,EAAcH,KAAKC,MAAQF,EAC/Bd,EAAQkB,WAGArB,GACVsB,cAAcd,GAGhB,OAAO,kBAAMc,cAAcd,MAC1B,CAACR,IAGF,yBAAKN,UAAU,SACb,yBAAKA,UAAU,QAEb,uBAAGA,UAAU,eACVe,EAAWP,IAGd,uBAAGR,UAAU,aACVe,EAAWP,EAAOI,KAIvB,yBAAKZ,UAAU,OACb,kBAAC,EAAD,CACEF,MAAOQ,EAAW,QAAU,QAC5BP,MAtER,WACEQ,GAAaD,MAwET,kBAAC,EAAD,CACER,MAAOQ,EAAW,QAAU,QAC5BP,MAAOO,EA7Df,WACE,GAAIA,EAAU,CACZ,IAAIuB,EAAUd,EAAYP,EAAOI,GAC7BkB,EAAQ,YAAOpB,GACnBoB,EAASC,QAAQF,GAEjBlB,EAAQmB,GACRjB,EAAOL,GAEP,IAAIwB,EAAYjB,EAAWP,GACvByB,EAAQ,YAAO7B,GACnB6B,EAASF,QAAQC,GACjB3B,EAAe4B,KAtBnB,WACO3B,IACHG,EAAQ,QACRI,EAAO,GACPF,EAAQ,IACRJ,GAAY,GACZF,EAAe,SAsEf,iCACE,yBAAKL,UAAU,QACb,yBAAKA,UAAU,iBACZI,EAAY8B,KAAI,SAACC,EAAOC,GACvB,OACE,6BAASpC,UAAU,aAAaqC,IAAKF,GAEnC,kCAEE,kCAAQ/B,EAAYkC,OAASF,EAAQ,GAAK,KAAOhC,EAAYkC,OAASF,GAAShC,EAAYkC,OAASF,EAApG,MAGF,mCAEE,kCAAQ1B,EAAK0B,GAAb,MAGF,oCAEE,kCAAQD,EAAR,eClGLI,MATf,WACE,OACE,yBAAKvC,UAAU,aACb,yCACA,kBAACwC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.fc3e5c9b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Button = ({ title, click }) => {\r\n  return ( \r\n    <button\r\n      className=\"waves-effect waves-light btn\"\r\n      onClick={() => click()}\r\n    >\r\n      {title}\r\n    </button>\r\n   );\r\n};\r\n \r\nexport default Button;","import React, { useState, useEffect } from 'react'\r\nimport Button from './Button';\r\n\r\nconst Clock = () => {\r\n  const [splitValues, setSplitValues] = useState([]);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [time, setTime] = useState('0.00');\r\n  const [laps, setLaps] = useState([]);\r\n  const [lap, setLap] = useState(0);\r\n  let interval = null;\r\n\r\n  function toggleTimer() {\r\n    setIsActive(!isActive);\r\n  }\r\n\r\n  function resetTimer() {\r\n    if (!isActive) {\r\n      setTime('0.00');\r\n      setLap(0);\r\n      setLaps([]);\r\n      setIsActive(false);\r\n      setSplitValues([]);\r\n    }\r\n  }\r\n\r\n  function splitTimer() {\r\n    if (isActive) {\r\n      let lapTime = formatTime((time - lap));\r\n      let lapTimes = [...laps];\r\n      lapTimes.unshift(lapTime)\r\n\r\n      setLaps(lapTimes)\r\n      setLap(time);\r\n\r\n      let splitTime = formatTime(time);\r\n      let splitVal = [...splitValues];\r\n      splitVal.unshift(splitTime);\r\n      setSplitValues(splitVal);\r\n    }\r\n  }\r\n\r\n  function formatTime(ms) {\r\n    let min = Math.floor((ms / (1000 * 60)) % 60);\r\n    let sec = ((ms % 60000) / 1000).toFixed(2);\r\n    return `${min < 10 ? '0' + min : min}.${sec < 10 ? '0' + sec : sec}`;\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    if (isActive) {\r\n      const startTime = Date.now() - time;\r\n\r\n      interval = setInterval(() => {\r\n        let currentTime = Date.now() - startTime;\r\n        setTime(currentTime);\r\n      });\r\n\r\n    } else if (!isActive) {\r\n      clearInterval(interval);\r\n    }\r\n\r\n    return () => clearInterval(interval);\r\n  }, [isActive]);\r\n\r\n  return (\r\n    <div className=\"clock\">\r\n      <div className=\"time\">\r\n\r\n        <p className=\"time__total\">\r\n          {formatTime(time)}\r\n        </p>\r\n\r\n        <p className=\"time__lap\">\r\n          {formatTime(time - lap)}\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        <Button\r\n          title={isActive ? 'Pause' : 'Start'}\r\n          click={toggleTimer}\r\n        ></Button>\r\n\r\n        <Button\r\n          title={isActive ? 'Split' : 'Reset'}\r\n          click={isActive ? splitTimer : resetTimer}\r\n        ></Button>\r\n\r\n      </div>\r\n\r\n      <section>\r\n        <div className=\"card\">\r\n          <div className=\"card__content\">\r\n            {splitValues.map((value, index) => {\r\n              return (\r\n                <article className=\"card__text\" key={value}>\r\n\r\n                  <p>\r\n                    Lap:\r\n                    <span> {splitValues.length - index < 10 ? \"0\" + (splitValues.length - index) : splitValues.length - index} </span>\r\n                  </p>\r\n\r\n                  <p>\r\n                    Time:\r\n                    <span> {laps[index]} </span>\r\n                  </p>\r\n\r\n                  <p>\r\n                    Total:\r\n                    <span> {value} </span>\r\n                  </p>\r\n\r\n                </article>\r\n              )\r\n            })\r\n            }\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Clock;","import React from 'react';\nimport Watch from './components/Watch';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1>Stopwatch</h1>\n      <Watch/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}